generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  firstName   String
  lastName    String?
  email       String     @unique
  password    String
  acceptTerms Boolean
  role        Role       @default(USER)
  approved    Boolean    @default(false)
  projects    Projects[]
}

model Projects {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String
  status         ProjectStatus    @default(OPEN)
  state          ProjectStage     @default(BIDDING)
  user           User?            @relation(fields: [userId], references: [id])
  userId         Int?
  projectDetails ProjectDetails[]
}

model ProjectDetails {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  stage      ProjectStage @default(BIDDING)
  config     Json
  Projects   Projects?    @relation(fields: [projectsId], references: [id])
  projectsId Int?
}

model Permission {
  id            Int              @id @default(autoincrement())
  name          String           @unique
  section       String
  Permissions   RolePermissions? @relation(fields: [permissionsId], references: [id])
  permissionsId Int?
}

model RolePermissions {
  id          Int          @id @default(autoincrement())
  name        Role         @unique
  permissions Permission[]
}

enum Role {
  ADMIN
  MANAGER
  DESIGNER
  TRADES
  USER
}

enum ProjectStatus {
  OPEN
  CLOSED
}

enum ProjectStage {
  BIDDING
  MATERIAL_SELECTION
  RECONSTRUCTION
  CONSTRUCTION
  PUNCH_LIST
}
